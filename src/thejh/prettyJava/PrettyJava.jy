package thejh.prettyJava                                                                            

import java.io.*
import java.util.regex.*

public class PrettyJava
  public static final String[] completeLineEating = new String[]{"if", "for", "else if", "while"}
  
  public static final String ppVar = "[a-zA-Z$_][a-zA-Z$_0-9]*"

  public static int getIndentation(String line)
    for i in [0..line.length()]
      char c = line.charAt(i)
      if c != ' '
        return i
    return -1
  
  public static String compileFor(String line)
    // "i in [0..9]"
    Pattern pFromTo = Pattern.compile("("+ppVar+") in \\[(.*)(\\.{2,3})(.*)\\]")
    Matcher mFromTo = pFromTo.matcher(line)
    if mFromTo.matches()
      String var = mFromTo.group(1)
      String start = mFromTo.group(2)
      String rangeDots = mFromTo.group(3)
      String end = mFromTo.group(4)
      return "int "+var+" = "+start+"; "+var+" < "+end+"; "+var+"++"
    return line
  
  public static String stripIndentation(String line)
    int indent = getIndentation(line)
    if indent == -1
      return ""
    return line.substring(indent)

  public static boolean isWhitespaceOnly(String line)
    for i in [0..line.length()]
      char c = line.charAt(i)
      if c != ' '
        return false
    return true

  public static boolean couldNeedSemicolon(String line)
    for i in [0..line.length()]
      char c = line.charAt(i)
      if c != ' '
        if line.indexOf("//") == i
          return false
        return true
    return false

  public static String addPadding(String line, int targetLength)
    while line.length() < targetLength
      line += " "
    return line
  
  public static String nTimes(String str, int times)
    String result = ""
    for i in [0..times]
      result += str
    return result

  public static String readEntireFile(String name) throws Exception
    String content = ""
    File file = new File(name)
    FileInputStream rawin = new FileInputStream(file)
    BufferedReader in = new BufferedReader(new InputStreamReader(rawin))
    String line = null
    while  (line = in.readLine()) != null
      if !content.equals("")
        content += "\n"
      content += line
    return content

  public static String compile(String code)
    String[] lines = code.split("\\n")
    int[] indentations = new int[lines.length]
    boolean[] linesWithContent = new boolean[lines.length]
    int maxLineLength = 0
    for i in [0..lines.length]
      linesWithContent[i] = !isWhitespaceOnly(lines[i])
      String lineWithoutIndent = stripIndentation(lines[i])
      for String completeLineEater: completeLineEating
        if lineWithoutIndent.startsWith(completeLineEater+" ")
          String withoutEater = lineWithoutIndent.substring(completeLineEater.length()+1)
          if completeLineEater.equals("for")
            withoutEater = compileFor(withoutEater)
          lines[i] = nTimes(" ", getIndentation(lines[i]))+completeLineEater+" ("+withoutEater+")"
      if lines[i].length() > maxLineLength
        maxLineLength = lines[i].length()
      int indentation = getIndentation(lines[i])
      indentations[i] = indentation
    String[] uglySymbols = new String[lines.length]

    for i in [0..lines.length]
      uglySymbols[i] = ""
      if !linesWithContent[i]
        continue
      int nexti = i
      boolean hasNextLine = true
      do
        nexti++
        if nexti == lines.length
          hasNextLine = false
          break
      while !linesWithContent[nexti]
      int indentDiff;
      if hasNextLine
        indentDiff = indentations[nexti] - indentations[i]
      else
        indentDiff = -indentations[i]
      if indentDiff <= 0 && couldNeedSemicolon(lines[i])
        uglySymbols[i] += ";"
      if indentDiff == 2
        uglySymbols[i] += "{"
      else if indentDiff < 0
        if  (-indentDiff)%2 != 0
          throw new RuntimeException("indentation must be a multiple of 2!")
        for int n=0; n<-indentDiff; n+=2
          uglySymbols[i] += "}"

    int paddingTarget = maxLineLength+3
    for i in [0..lines.length]
      lines[i] = addPadding(lines[i], paddingTarget) + uglySymbols[i]
    String output = ""
    for i in [0..lines.length]
      if i > 0
        output += "\n"
      output += lines[i]
    return output

  public static void main(String[] args) throws Exception
    String code = readEntireFile(args[0])
    String compiled = compile(code)
    System.out.println(compiled)
